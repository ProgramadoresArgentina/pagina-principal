// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String   // Hash de la contraseña
  name         String?
  username     String?  @unique
  avatar       String?
  bio          String?
  website      String?
  location     String?
  // Identificador de WhatsApp (Lead/Lista)
  lid          String?  @unique
  isSubscribed Boolean  @default(false) // Si está suscrito al club
  isActive     Boolean  @default(true)  // Si la cuenta está activa
  lastLogin    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  roleId       String
  role         Role     @relation(fields: [roleId], references: [id])
  jobPreference JobPreference?
  
  // Chat relations
  chatMessages ChatMessage[]
  chatBans     ChatBan[] @relation("ChatBanUser")
  chatBansModerated ChatBan[] @relation("ChatBanModerator")
  
  // Book reading progress
  bookProgress BookProgress[]
  
  // User pins (badges)
  pins UserPin[]

  @@map("users")
}

// Seniority para ofertas laborales
enum Seniority {
  JUNIOR
  SEMI_SENIOR
  SENIOR
  LEAD
}

// Preferencias laborales del usuario (1:1)
model JobPreference {
  id                      String     @id @default(cuid())
  userId                  String     @unique
  receiveJobNotifications Boolean    @default(false)
  technologies            String[]   @default([])
  seniority               Seniority?
  provinces               String[]   @default([])
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt

  // Relaciones
  user                    User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("job_preferences")
}

// Modelo de Rol
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  users       User[]
  permissions RolePermission[]

  @@map("roles")
}

// Modelo de Permiso
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  resource    String   // Recurso al que aplica (posts, users, etc.)
  action      String   // Acción (create, read, update, delete)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  roles       RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

// Tabla de relación Role-Permission
model RolePermission {
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

// Modelo de Chat Global
model Chat {
  id        String   @id @default(cuid())
  name      String   @default("Chat Global")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  messages ChatMessage[]
  bans     ChatBan[]

  @@map("chats")
}

// Modelo de Mensaje de Chat
model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId    String?  // Null para usuarios anónimos
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Para usuarios anónimos
  anonymousName String? // "anonimo-123"
  userIp        String? // Para tracking y bans

  @@map("chat_messages")
}

// Modelo de Ban de Chat
model ChatBan {
  id        String   @id @default(cuid())
  reason    String?
  expiresAt DateTime? // Null = ban permanente
  createdAt DateTime @default(now())

  // Relaciones
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId    String?  // Null si es ban por IP
  user      User?    @relation("ChatBanUser", fields: [userId], references: [id], onDelete: SetNull)
  bannedBy  String   // ID del moderador/admin que aplicó el ban
  bannedByUser User  @relation("ChatBanModerator", fields: [bannedBy], references: [id])
  
  // Para bans por IP
  bannedIp  String?

  @@map("chat_bans")
}

// Modelo de Progreso de Lectura de Libros
model BookProgress {
  id          String   @id @default(cuid())
  userId      String
  bookTitle   String   // Título del libro
  bookFilename String  // Nombre del archivo PDF
  currentPage Int      @default(1) // Página actual
  totalPages  Int?     // Total de páginas (opcional)
  progress    Float    @default(0) // Porcentaje de progreso (0-100)
  lastReadAt  DateTime @default(now()) // Última vez que leyó
  timeSpent   Int      @default(0) // Tiempo total en segundos
  isCompleted Boolean  @default(false) // Si completó el libro
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Índices únicos
  @@unique([userId, bookFilename])
  @@map("book_progress")
}

// Modelo de Pin (Insignia/Badge)
model Pin {
  id          String   @id @default(cuid())
  name        String   @unique // Ej: "Hacktoberfest 2024", "Contributor"
  description String?  // Descripción del pin
  imageUrl    String   // Ruta a la imagen del pin (ej: /assets/images/pins/pin-hacktoberfest.webp)
  category    String?  // Categoría del pin (ej: "evento", "contribución", "logro")
  isActive    Boolean  @default(true) // Si el pin está activo y se puede asignar
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  userPins    UserPin[]

  @@map("pins")
}

// Tabla de relación Usuario-Pin
model UserPin {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pinId       String
  pin         Pin      @relation(fields: [pinId], references: [id], onDelete: Cascade)
  earnedAt    DateTime @default(now()) // Fecha en que obtuvo el pin
  grantedBy   String?  // ID del admin que otorgó el pin (opcional)
  reason      String?  // Razón por la que se otorgó (opcional)

  @@unique([userId, pinId]) // Un usuario no puede tener el mismo pin dos veces
  @@map("user_pins")
}

