generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  email             String          @unique
  password          String
  name              String?
  username          String?         @unique
  avatar            String?
  bio               String?
  website           String?
  location          String?
  isSubscribed      Boolean         @default(false)
  isActive          Boolean         @default(true)
  lastLogin         DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  roleId            String
  lid               String?         @unique
  bookProgress      BookProgress[]
  chatBansModerated ChatBan[]       @relation("ChatBanModerator")
  chatBans          ChatBan[]       @relation("ChatBanUser")
  chatMessages      ChatMessage[]
  forumApplause     ForumApplause[]
  forumComments     ForumComment[]
  forumPosts        ForumPost[]
  jobPreference     JobPreference?
  referidoPor       Referido[]      @relation("UserReferido")
  referidosHechos   Referido[]      @relation("UserReferidos")
  pins              UserPin[]
  role              Role            @relation(fields: [roleId], references: [id])

  @@map("users")
}

model JobPreference {
  id                      String     @id @default(cuid())
  userId                  String     @unique
  receiveJobNotifications Boolean    @default(false)
  technologies            String[]   @default([])
  seniority               Seniority?
  provinces               String[]   @default([])
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  user                    User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("job_preferences")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       User[]

  @@map("roles")
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  resource    String
  action      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model RolePermission {
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Chat {
  id        String        @id @default(cuid())
  name      String        @default("Chat Global")
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  bans      ChatBan[]
  messages  ChatMessage[]

  @@map("chats")
}

model ChatMessage {
  id            String   @id @default(cuid())
  content       String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  chatId        String
  userId        String?
  anonymousName String?
  userIp        String?
  chat          Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user          User?    @relation(fields: [userId], references: [id])

  @@map("chat_messages")
}

model ChatBan {
  id           String    @id @default(cuid())
  reason       String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  chatId       String
  userId       String?
  bannedBy     String
  bannedIp     String?
  bannedByUser User      @relation("ChatBanModerator", fields: [bannedBy], references: [id])
  chat         Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user         User?     @relation("ChatBanUser", fields: [userId], references: [id])

  @@map("chat_bans")
}

model BookProgress {
  id           String   @id @default(cuid())
  userId       String
  bookTitle    String
  bookFilename String
  currentPage  Int      @default(1)
  totalPages   Int?
  progress     Float    @default(0)
  lastReadAt   DateTime @default(now())
  timeSpent    Int      @default(0)
  isCompleted  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookFilename])
  @@map("book_progress")
}

model Pin {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  imageUrl    String
  category    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userPins    UserPin[]

  @@map("pins")
}

model UserPin {
  id        String   @id @default(cuid())
  userId    String
  pinId     String
  earnedAt  DateTime @default(now())
  grantedBy String?
  reason    String?
  pin       Pin      @relation(fields: [pinId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, pinId])
  @@map("user_pins")
}

model ForumPost {
  id         String          @id @default(cuid())
  title      String
  content    String
  slug       String          @unique
  isPinned   Boolean         @default(false)
  isLocked   Boolean         @default(false)
  viewCount  Int             @default(0)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  authorId   String
  multimedia Json?
  score      Int             @default(0)
  applause   ForumApplause[]
  comments   ForumComment[]
  author     User            @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("forum_posts")
}

model ForumComment {
  id        String         @id @default(cuid())
  content   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  authorId  String
  postId    String
  parentId  String?
  author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    ForumComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   ForumComment[] @relation("CommentReplies")
  post      ForumPost      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("forum_comments")
}

model ForumApplause {
  id        String    @id @default(cuid())
  postId    String
  userId    String
  count     Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("forum_applause")
}

model Referido {
  id          String   @id @default(cuid())
  referidorId String
  referidoId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  referido    User     @relation("UserReferido", fields: [referidoId], references: [id], onDelete: Cascade)
  referidor   User     @relation("UserReferidos", fields: [referidorId], references: [id], onDelete: Cascade)

  @@unique([referidorId, referidoId])
  @@map("referidos")
}

enum Seniority {
  JUNIOR
  SEMI_SENIOR
  SENIOR
  LEAD
}
